static void Main(string[] args)
        {
            Stopwatch watch = new Stopwatch();
            watch.Start();

            Console.WriteLine(LatticPath(8, 8, 0, 0));
            Console.WriteLine(DynamicPath(20, 20));
            watch.Stop();
            Console.WriteLine(watch.ElapsedMilliseconds);
            Console.ReadLine();
        }
        //trash optimization
        static int LatticPath(int gridX, int gridY, int currentX, int currentY)
        {
            if (currentX < gridX && currentY < gridY)
            {
                return LatticPath(gridX, gridY, currentX + 1, currentY) + LatticPath(gridX, gridY, currentX, currentY + 1); 
            }
            
            return 1;
        }
        //good optimization
        static BigInteger DynamicPath(int gridX, int gridY)
        {
            BigInteger[,] paths = new BigInteger[gridX+1, gridY+1];//account for both corners - a grid 2x2 grid has three line intesections

            //initialize edges
            for (int i = 0; i <= gridY; i++)
            {
                paths[gridX, i] = 1;
            }
            for (int j = 0; j <= gridX; j++)
            {
                paths[j, gridY] = 1;
            }
            //look backwards at adjacent paths to see how many paths there are
            for (int i = gridX-1; i >= 0; i--)
            {
                for (int j = gridY-1; j >= 0; j--)
                {
                    paths[i, j] = paths[i + 1, j] + paths[i, j + 1];
                }
            }
            return paths[0, 0];
        }
