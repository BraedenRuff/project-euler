using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace ProjectEuler12
{
    class Program
    {
        static void Main(string[] args)
        {
            Stopwatch watch = new Stopwatch();
            watch.Start();
            int currentTriangleNumber = 0;
            int currentIteration = 0;
            List<int> currentPrimeList = new List<int>();
            while (FindNumDivisorsPrimeFactor(currentTriangleNumber, currentPrimeList) <= 500)
            {
                currentIteration++;
                currentTriangleNumber += currentIteration;
                currentPrimeList = FindPrimes(currentTriangleNumber);
            }
            watch.Stop();
            Console.WriteLine(currentTriangleNumber);
            Console.WriteLine("Time elapsed: " + watch.ElapsedMilliseconds);
            Console.ReadLine();
        }
        
        //easy way
        public static int FindNumDivisors(int num)
        {
            int divisors = 0;
            int sqrt = (int)Math.Sqrt(num);
            for(int i = 1; i <= sqrt; i++)
            {
                if (num%i == 0)
                {
                    divisors += 2;
                }
            }
            if (sqrt * sqrt == num)
            {
                divisors--;
            }
            return divisors;
        }

        public static int FindNumDivisorsPrimeFactor(int num, List<int> primelist)
        {
            
            //discovered that if you prime factorize a number (say like 36 = 2^2 * 3^2, or like 1800 = 2^3 * 3^2 * 5^2), 
            //then the number of factors is the exponent of each different prime factor multiplied together 
            //(in these cases, 3 * 3 = 9 [because it's a square it's odd], and 4 * 3 * 3 = 36 (checked by hand, it's right)
            
            int divisors = 1;
            int exponent;
            int remain = num;

            for (int i = 0; i < primelist.Count; i++)
            {
                exponent = 1;
                while (remain % primelist[i] == 0)
                {
                    exponent++;
                    remain = remain / primelist[i];
                }
                divisors *= exponent;
                if (remain == 1)
                {
                    return divisors;
                }
            }

            return divisors;
        }

        public static List<int> FindPrimes(int num)
        {
            List<int> primes = new List<int>();
            while (num%2 == 0)
            {
                num /= 2;
                primes.Add(2);
            }
            int currentNumber = 3;
            while (num != 1)
            {
                if (num % currentNumber == 0)
                {
                    primes.Add(currentNumber);
                    num /= currentNumber;
                }
                else
                {
                    currentNumber += 2;
                }
            }
            return primes;
        }
    }
}
